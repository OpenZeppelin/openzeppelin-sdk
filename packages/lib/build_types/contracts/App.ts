/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class App extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: "proxy", type: "address" }],
        name: "ProxyCreated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "providerName", type: "string" },
          { indexed: false, name: "package", type: "address" },
          { indexed: false, name: "version", type: "uint64[3]" }
        ],
        name: "PackageChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "previousOwner", type: "address" }],
        name: "OwnershipRenounced",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "previousOwner", type: "address" },
          { indexed: true, name: "newOwner", type: "address" }
        ],
        name: "OwnershipTransferred",
        type: "event"
      },
      {
        constant: true,
        inputs: [{ name: "packageName", type: "string" }],
        name: "getProvider",
        outputs: [{ name: "provider", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "packageName", type: "string" }],
        name: "getPackage",
        outputs: [
          { name: "", type: "address" },
          { name: "", type: "uint64[3]" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "packageName", type: "string" },
          { name: "package", type: "address" },
          { name: "version", type: "uint64[3]" }
        ],
        name: "setPackage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "packageName", type: "string" }],
        name: "unsetPackage",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "packageName", type: "string" },
          { name: "contractName", type: "string" }
        ],
        name: "getImplementation",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "proxy", type: "address" }],
        name: "getProxyImplementation",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "proxy", type: "address" }],
        name: "getProxyAdmin",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "proxy", type: "address" },
          { name: "newAdmin", type: "address" }
        ],
        name: "changeProxyAdmin",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "packageName", type: "string" },
          { name: "contractName", type: "string" },
          { name: "data", type: "bytes" }
        ],
        name: "create",
        outputs: [{ name: "", type: "address" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "proxy", type: "address" },
          { name: "packageName", type: "string" },
          { name: "contractName", type: "string" }
        ],
        name: "upgrade",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "proxy", type: "address" },
          { name: "packageName", type: "string" },
          { name: "contractName", type: "string" },
          { name: "data", type: "bytes" }
        ],
        name: "upgradeAndCall",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<App> {
    const contract = new App(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.owner, []);
  }

  public getProvider(packageName: string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getProvider, [
      packageName.toString()
    ]);
  }

  public getPackage(packageName: string): Promise<[string, BigNumber[]]> {
    return TC.promisify(this.rawWeb3Contract.getPackage, [
      packageName.toString()
    ]);
  }

  public getImplementation(
    packageName: string,
    contractName: string
  ): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getImplementation, [
      packageName.toString(),
      contractName.toString()
    ]);
  }

  public getProxyImplementation(proxy: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getProxyImplementation, [
      proxy.toString()
    ]);
  }

  public getProxyAdmin(proxy: BigNumber | string): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.getProxyAdmin, [proxy.toString()]);
  }

  public renounceOwnershipTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "renounceOwnership",
      []
    );
  }
  public transferOwnershipTx(
    _newOwner: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "transferOwnership",
      [_newOwner.toString()]
    );
  }
  public setPackageTx(
    packageName: string,
    package: BigNumber | string,
    version: BigNumber[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "setPackage", [
      packageName.toString(),
      package.toString(),
      version.map(val => val.toString())
    ]);
  }
  public unsetPackageTx(
    packageName: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "unsetPackage",
      [packageName.toString()]
    );
  }
  public changeProxyAdminTx(
    proxy: BigNumber | string,
    newAdmin: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeProxyAdmin",
      [proxy.toString(), newAdmin.toString()]
    );
  }
  public createTx(
    packageName: string,
    contractName: string,
    data: string[]
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "create",
      [
        packageName.toString(),
        contractName.toString(),
        data.map(val => val.toString())
      ]
    );
  }
  public upgradeTx(
    proxy: BigNumber | string,
    packageName: string,
    contractName: string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "upgrade", [
      proxy.toString(),
      packageName.toString(),
      contractName.toString()
    ]);
  }
  public upgradeAndCallTx(
    proxy: BigNumber | string,
    packageName: string,
    contractName: string,
    data: string[]
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "upgradeAndCall",
      [
        proxy.toString(),
        packageName.toString(),
        contractName.toString(),
        data.map(val => val.toString())
      ]
    );
  }

  public ProxyCreatedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { proxy: BigNumber | string },
    {}
  > {
    return new TC.DeferredEventWrapper<{ proxy: BigNumber | string }, {}>(
      this,
      "ProxyCreated",
      eventFilter
    );
  }
  public PackageChangedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { providerName: string; package: BigNumber | string; version: BigNumber[] },
    {}
  > {
    return new TC.DeferredEventWrapper<
      {
        providerName: string;
        package: BigNumber | string;
        version: BigNumber[];
      },
      {}
    >(this, "PackageChanged", eventFilter);
  }
  public OwnershipRenouncedEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string },
    { previousOwner?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string },
      { previousOwner?: BigNumber | string | Array<BigNumber | string> }
    >(this, "OwnershipRenounced", eventFilter);
  }
  public OwnershipTransferredEvent(eventFilter: {
    previousOwner?: BigNumber | string | Array<BigNumber | string>;
    newOwner?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { previousOwner: BigNumber | string; newOwner: BigNumber | string },
    {
      previousOwner?: BigNumber | string | Array<BigNumber | string>;
      newOwner?: BigNumber | string | Array<BigNumber | string>;
    }
  > {
    return new TC.DeferredEventWrapper<
      { previousOwner: BigNumber | string; newOwner: BigNumber | string },
      {
        previousOwner?: BigNumber | string | Array<BigNumber | string>;
        newOwner?: BigNumber | string | Array<BigNumber | string>;
      }
    >(this, "OwnershipTransferred", eventFilter);
  }
}
