/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class SampleChild extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "father",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "child",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "isHuman",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "mother",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "gramps",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_mother", type: "uint256" },
          { name: "_gramps", type: "uint256" },
          { name: "_father", type: "uint256" },
          { name: "_child", type: "uint256" }
        ],
        name: "initialize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "initialize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_gramps", type: "uint256" },
          { name: "_father", type: "uint256" }
        ],
        name: "initialize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "value", type: "uint256" }],
        name: "initialize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<SampleChild> {
    const contract = new SampleChild(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get father(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.father, []);
  }

  public get child(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.child, []);
  }

  public get isHuman(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.isHuman, []);
  }

  public get mother(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.mother, []);
  }

  public get gramps(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.gramps, []);
  }

  public initializeTx(
    _mother: BigNumber | number,
    _gramps: BigNumber | number,
    _father: BigNumber | number,
    _child: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "initialize", [
      _mother.toString(),
      _gramps.toString(),
      _father.toString(),
      _child.toString()
    ]);
  }
}
