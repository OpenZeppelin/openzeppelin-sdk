/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class StorageMockWithArrays extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "my_public_int8_staticarray",
        outputs: [{ name: "", type: "int8" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "my_public_uint256_dynarray",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<StorageMockWithArrays> {
    const contract = new StorageMockWithArrays(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public my_public_int8_staticarray(
    arg0: BigNumber | number
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.my_public_int8_staticarray, [
      arg0.toString()
    ]);
  }

  public my_public_uint256_dynarray(
    arg0: BigNumber | number
  ): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.my_public_uint256_dynarray, [
      arg0.toString()
    ]);
  }
}
