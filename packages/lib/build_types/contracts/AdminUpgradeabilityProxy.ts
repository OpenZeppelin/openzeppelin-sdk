/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class AdminUpgradeabilityProxy extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [
          { name: "_implementation", type: "address" },
          { name: "_data", type: "bytes" }
        ],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: "previousAdmin", type: "address" },
          { indexed: false, name: "newAdmin", type: "address" }
        ],
        name: "AdminChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "implementation", type: "address" }],
        name: "Upgraded",
        type: "event"
      },
      {
        constant: true,
        inputs: [],
        name: "admin",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "implementation",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newAdmin", type: "address" }],
        name: "changeAdmin",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newImplementation", type: "address" }],
        name: "upgradeTo",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "newImplementation", type: "address" },
          { name: "data", type: "bytes" }
        ],
        name: "upgradeToAndCall",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<AdminUpgradeabilityProxy> {
    const contract = new AdminUpgradeabilityProxy(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get admin(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.admin, []);
  }

  public get implementation(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.implementation, []);
  }

  public changeAdminTx(
    newAdmin: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "changeAdmin",
      [newAdmin.toString()]
    );
  }
  public upgradeToTx(
    newImplementation: BigNumber | string
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "upgradeTo", [
      newImplementation.toString()
    ]);
  }
  public upgradeToAndCallTx(
    newImplementation: BigNumber | string,
    data: string[]
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "upgradeToAndCall",
      [newImplementation.toString(), data.map(val => val.toString())]
    );
  }

  public AdminChangedEvent(eventFilter: {}): TC.DeferredEventWrapper<
    { previousAdmin: BigNumber | string; newAdmin: BigNumber | string },
    {}
  > {
    return new TC.DeferredEventWrapper<
      { previousAdmin: BigNumber | string; newAdmin: BigNumber | string },
      {}
    >(this, "AdminChanged", eventFilter);
  }
  public UpgradedEvent(eventFilter: {
    implementation?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { implementation: BigNumber | string },
    { implementation?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { implementation: BigNumber | string },
      { implementation?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Upgraded", eventFilter);
  }
}
