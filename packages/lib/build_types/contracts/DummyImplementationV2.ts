/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class DummyImplementationV2 extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [{ name: "_value", type: "uint256" }],
        name: "initializePayable",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "text",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "initializeNonPayable",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "reverts",
        outputs: [],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "value",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_value", type: "uint256" }],
        name: "initializeNonPayable",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "values",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "get",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "initializePayable",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_value", type: "uint256" },
          { name: "_text", type: "string" },
          { name: "_values", type: "uint256[]" }
        ],
        name: "initialize",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "newVal", type: "uint256" }],
        name: "migrate",
        outputs: [],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "version",
        outputs: [{ name: "", type: "string" }],
        payable: false,
        stateMutability: "pure",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<DummyImplementationV2> {
    const contract = new DummyImplementationV2(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get text(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.text, []);
  }

  public get value(): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.value, []);
  }

  public get get(): Promise<boolean> {
    return TC.promisify(this.rawWeb3Contract.get, []);
  }

  public get version(): Promise<string> {
    return TC.promisify(this.rawWeb3Contract.version, []);
  }

  public reverts(): Promise<void> {
    return TC.promisify(this.rawWeb3Contract.reverts, []);
  }

  public values(arg0: BigNumber | number): Promise<BigNumber> {
    return TC.promisify(this.rawWeb3Contract.values, [arg0.toString()]);
  }

  public initializePayableTx(
    _value: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "initializePayable",
      [_value.toString()]
    );
  }
  public initializeNonPayableTx(): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(
      this,
      "initializeNonPayable",
      []
    );
  }
  public initializeTx(
    _value: BigNumber | number,
    _text: string,
    _values: BigNumber[]
  ): TC.DeferredTransactionWrapper<TC.ITxParams> {
    return new TC.DeferredTransactionWrapper<TC.ITxParams>(this, "initialize", [
      _value.toString(),
      _text.toString(),
      _values.map(val => val.toString())
    ]);
  }
  public migrateTx(
    newVal: BigNumber | number
  ): TC.DeferredTransactionWrapper<TC.IPayableTxParams> {
    return new TC.DeferredTransactionWrapper<TC.IPayableTxParams>(
      this,
      "migrate",
      [newVal.toString()]
    );
  }
}
