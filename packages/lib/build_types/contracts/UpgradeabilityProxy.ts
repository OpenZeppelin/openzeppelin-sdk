/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import * as TC from "./typechain-runtime";

export class UpgradeabilityProxy extends TC.TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        inputs: [
          { name: "_implementation", type: "address" },
          { name: "_data", type: "bytes" }
        ],
        payable: true,
        stateMutability: "payable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: "implementation", type: "address" }],
        name: "Upgraded",
        type: "event"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<UpgradeabilityProxy> {
    const contract = new UpgradeabilityProxy(web3, address);
    const code = await TC.promisify(web3.eth.getCode, [address]);

    // in case of missing smartcontract, code can be equal to "0x0" or "0x" depending on exact web3 implementation
    // to cover all these cases we just check against the source code length — there won't be any meaningful EVM program in less then 3 chars
    if (code.length < 4) {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public UpgradedEvent(eventFilter: {
    implementation?: BigNumber | string | Array<BigNumber | string>;
  }): TC.DeferredEventWrapper<
    { implementation: BigNumber | string },
    { implementation?: BigNumber | string | Array<BigNumber | string> }
  > {
    return new TC.DeferredEventWrapper<
      { implementation: BigNumber | string },
      { implementation?: BigNumber | string | Array<BigNumber | string> }
    >(this, "Upgraded", eventFilter);
  }
}
