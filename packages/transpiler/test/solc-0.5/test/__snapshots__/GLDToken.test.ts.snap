// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GLDToken contract is converted to a valid GLDTokenUpgradable contract 1`] = `
"pragma solidity ^0.5.0;

import \\"./@openzeppelin/contracts/token/ERC20/ERC20Upgradable.sol\\";
import \\"./@openzeppelin/contracts/token/ERC20/ERC20DetailedUpgradable.sol\\";
import \\"@openzeppelin/upgrades/contracts/Initializable.sol\\";

contract GLDTokenUpgradable is Initializable, ERC20Upgradable, ERC20DetailedUpgradable {
    function initialize(uint256 initialSupply) external initializer {
        __init(true, initialSupply);
    }

    function __init(bool callChain, uint256 initialSupply) internal {
        if(callChain) {
            ContextUpgradable.__init(false);
            ERC20Upgradable.__init(false);
            ERC20DetailedUpgradable.__init(false, \\"Gold\\", \\"GLD\\", 18);
        }
        
        
        _mint(msg.sender, initialSupply);
    
    }

    
}
"
`;

exports[`GLDToken contract is converted to a valid GLDTokenUpgradable contract 2`] = `
"pragma solidity ^0.5.0;

import \\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\";
import \\"@openzeppelin/upgrades/contracts/Initializable.sol\\";

/**
 * @dev Optional functions from the ERC20 standard.
 */
contract ERC20DetailedUpgradable is Initializable, IERC20 {

    function __init(bool callChain, string memory name, string memory symbol, uint8 decimals) internal {
        
        
        
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    
    }

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    /**
     * @dev Sets the values for \`name\`, \`symbol\`, and \`decimals\`. All three of
     * these values are immutable: they can only be set once during
     * construction.
     */
    

    /**
     * @dev Returns the name of the token.
     */
    function name() public view returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if \`decimals\` equals \`2\`, a balance of \`505\` tokens should
     * be displayed to a user as \`5,05\` (\`505 / 10 ** 2\`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}
"
`;

exports[`GLDToken contract is converted to a valid GLDTokenUpgradable contract 3`] = `
"pragma solidity ^0.5.0;

import \\"../../GSN/ContextUpgradable.sol\\";
import \\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\";
import \\"@openzeppelin/contracts/math/SafeMath.sol\\";
import \\"@openzeppelin/upgrades/contracts/Initializable.sol\\";

/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20Mintable}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin guidelines: functions revert instead
 * of returning \`false\` on failure. This behavior is nonetheless conventional
 * and does not conflict with the expectations of ERC20 applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20Upgradable is Initializable, ContextUpgradable, IERC20 {
    function initialize() external initializer {
        __init(true);
    }

    function __init(bool callChain) internal {
        if(callChain) {
            ContextUpgradable.__init(false);
        }
        
        
    }

    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - \`recipient\` cannot be the zero address.
     * - the caller must have a balance of at least \`amount\`.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * Requirements:
     *
     * - \`spender\` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - \`sender\` and \`recipient\` cannot be the zero address.
     * - \`sender\` must have a balance of at least \`amount\`.
     * - the caller must have allowance for \`sender\`'s tokens of at least
     * \`amount\`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\"ERC20: transfer amount exceeds allowance\\"));
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to \`spender\` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - \`spender\` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to \`spender\` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - \`spender\` cannot be the zero address.
     * - \`spender\` must have allowance for the caller of at least
     * \`subtractedValue\`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\"ERC20: decreased allowance below zero\\"));
        return true;
    }

    /**
     * @dev Moves tokens \`amount\` from \`sender\` to \`recipient\`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - \`sender\` cannot be the zero address.
     * - \`recipient\` cannot be the zero address.
     * - \`sender\` must have a balance of at least \`amount\`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), \\"ERC20: transfer from the zero address\\");
        require(recipient != address(0), \\"ERC20: transfer to the zero address\\");

        _balances[sender] = _balances[sender].sub(amount, \\"ERC20: transfer amount exceeds balance\\");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    /** @dev Creates \`amount\` tokens and assigns them to \`account\`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with \`from\` set to the zero address.
     *
     * Requirements
     *
     * - \`to\` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), \\"ERC20: mint to the zero address\\");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

     /**
     * @dev Destroys \`amount\` tokens from \`account\`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with \`to\` set to the zero address.
     *
     * Requirements
     *
     * - \`account\` cannot be the zero address.
     * - \`account\` must have at least \`amount\` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), \\"ERC20: burn from the zero address\\");

        _balances[account] = _balances[account].sub(amount, \\"ERC20: burn amount exceeds balance\\");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets \`amount\` as the allowance of \`spender\` over the \`owner\`s tokens.
     *
     * This is internal function is equivalent to \`approve\`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - \`owner\` cannot be the zero address.
     * - \`spender\` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), \\"ERC20: approve from the zero address\\");
        require(spender != address(0), \\"ERC20: approve to the zero address\\");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys \`amount\` tokens from \`account\`.\`amount\` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\"ERC20: burn amount exceeds allowance\\"));
    }
}
"
`;

exports[`GLDToken contract is converted to a valid GLDTokenUpgradable contract 4`] = `
"pragma solidity ^0.5.0;
import \\"@openzeppelin/upgrades/contracts/Initializable.sol\\";

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract ContextUpgradable is Initializable {
    function initialize() external initializer {
        __init(true);
    }

    function __init(bool callChain) internal {
        
        
         
    }

    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    
    // solhint-disable-previous-line no-empty-blocks

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}
"
`;
